require './lib/dock'
require './lib/renter'
require './lib/boat'

RSpec.describe Dock do
  describe '#initialize' do
    it 'exists' do
      dock = Dock.new("The Rowing Dock", 3)

      expect(dock).to be_an_instance_of(Dock)
    end

    it 'has attributes' do
      dock = Dock.new("The Rowing Dock", 3)

      expect(dock.name).to eq("The Rowing Dock")
      expect(dock.max_rental_time).to eq(3)
    end
  end

  describe '#rent(boat, renter), #renter_log' do
    it 'adds boats and renters to a hash' do
      dock = Dock.new("The Rowing Dock", 3)

      kayak_1 = Boat.new(:kayak, 20)
      kayak_2 = Boat.new(:kayak, 20)
      sup_1 = Boat.new(:standup_paddle_board, 15)

      patrick = Renter.new("Patrick Star", "4242424242424242")
      eugene = Renter.new("Eugene Crabs", "1313131313131313")

      log = {}

      expect(dock.rental_log).to eq(log)

      dock.rent(kayak_1, patrick)
      dock.rent(kayak_2, patrick)
      dock.rent(sup_1, eugene)

      log = {
        kayak_1 => patrick,
        kayak_2 => patrick,
        sup_1   => eugene,
      }

      expect(dock.rental_log).to eq(log)
    end
  end

  describe '#charge(boat)' do
# This method returns a hash with two key/value pairs:
# The key :card_number points to the credit card number of the Renter that rented the boat
# The key :amount points to the amount that should be charged. The amount is calculated by multiplying the Boat's price_per_hour by the number of hours it was rented. However, any hours past the Dock's max_rental_time should not be counted. So if a Boat is rented for 4 hours, and the max_rental_time is 3, the charge should only be for 3 hours.
    it 'holds credit_card_number and charge' do
      dock = Dock.new("The Rowing Dock", 3)

      kayak_1 = Boat.new(:kayak, 20)
      kayak_2 = Boat.new(:kayak, 20)
      sup_1 = Boat.new(:standup_paddle_board, 15)

      patrick = Renter.new("Patrick Star", "4242424242424242")
      eugene = Renter.new("Eugene Crabs", "1313131313131313")

      dock.rent(kayak_1, patrick)
      dock.rent(kayak_2, patrick)
      dock.rent(sup_1, eugene)

      kayak_1.add_hour
      kayak_1.add_hour

      kayak_1_charge = {
        :card_number => "4242424242424242",
        :amount => 40
      }

      expect(dock.charge(kayak_1)).to eq(kayak_1_charge)

      sup_1.add_hour
      sup_1.add_hour
      sup_1.add_hour

      # Any hours past the max rental time should not count
      sup_1.add_hour
      sup_1.add_hour

      sup_1_charge = {
        :card_number => "1313131313131313",
        :amount => 45
      }

      expect(dock.charge(sup_1)).to eq(sup_1_charge)
    end
  end

  describe '#return(boat)' do
    it 'signifies that a boat has been returned and is no longer being rented' do
      dock = Dock.new("The Rowing Dock", 3)

      kayak_1 = Boat.new(:kayak, 20)
      kayak_2 = Boat.new(:kayak, 20)
      canoe = Boat.new(:canoe, 25)
      sup_1 = Boat.new(:standup_paddle_board, 15)
      sup_2 = Boat.new(:standup_paddle_board, 15)

      patrick = Renter.new("Patrick Star", "4242424242424242")
      eugene = Renter.new("Eugene Crabs", "1313131313131313")

      # Rent Boats out to first Renter
      dock.rent(kayak_1, patrick)
      dock.rent(kayak_2, patrick)

      # kayak_1 and kayak_2 are rented an additional hour
      dock.log_hour

      dock.rent(canoe, patrick)

      # kayak_1, kayak_2, and canoe are rented an additional hour
      dock.log_hour

      expect(dock.rental_log).to eq({
          kayak_1 => patrick,
          kayak_2 => patrick,
          canoe   => patrick
        })

      dock.return(kayak_1)
      dock.return(kayak_2)

      expect(dock.rental_log).to eq({
          canoe   => patrick
        })
    end
  end

  describe '#log_hour' do
    it 'all boats that are currently rented have been rented an additional hour' do
      dock = Dock.new("The Rowing Dock", 3)

      kayak_1 = Boat.new(:kayak, 20)
      kayak_2 = Boat.new(:kayak, 20)
      canoe = Boat.new(:canoe, 25)
      sup_1 = Boat.new(:standup_paddle_board, 15)
      sup_2 = Boat.new(:standup_paddle_board, 15)

      patrick = Renter.new("Patrick Star", "4242424242424242")
      eugene = Renter.new("Eugene Crabs", "1313131313131313")

      # Rent Boats out to first Renter
      dock.rent(kayak_1, patrick)
      dock.rent(kayak_2, patrick)

      # kayak_1 and kayak_2 are rented an additional hour
      dock.log_hour

      expect(kayak_1.hours_rented).to eq(1)
      expect(kayak_2.hours_rented).to eq(1)

      dock.rent(canoe, patrick)

      # kayak_1, kayak_2, and canoe are rented an additional hour
      dock.log_hour

      expect(kayak_1.hours_rented).to eq(2)
      expect(kayak_2.hours_rented).to eq(2)
      expect(canoe.hours_rented).to eq(1)
    end
  end

  # revenue - This method takes no arguments. It returns the total revenue generated by charging all boats that have been rented and returned. A charge for a boat follows the same rules as iteration 3.
  describe '#return and #revenue' do
    it 'adds to revenue after boat is returned' do
      dock = Dock.new("The Rowing Dock", 3)

      kayak_1 = Boat.new(:kayak, 20)
      kayak_2 = Boat.new(:kayak, 20)
      canoe = Boat.new(:canoe, 25)
      sup_1 = Boat.new(:standup_paddle_board, 15)
      sup_2 = Boat.new(:standup_paddle_board, 15)

      patrick = Renter.new("Patrick Star", "4242424242424242")
      eugene = Renter.new("Eugene Crabs", "1313131313131313")

      # Rent Boats out to first Renter
      dock.rent(kayak_1, patrick)
      dock.rent(kayak_2, patrick)

      # kayak_1 and kayak_2 are rented an additional hour
      dock.log_hour

      dock.rent(canoe, patrick)

      # kayak_1, kayak_2, and canoe are rented an additional hour
      dock.log_hour

      expect(dock.revenue).to eq(0)

      dock.return(kayak_1)
      dock.return(kayak_2)
      dock.return(canoe)

      expect(dock.revenue).to eq(105)


      # Rent Boats out to a second Renter
      dock.rent(sup_1, eugene)
      dock.rent(sup_2, eugene)

      dock.log_hour
      dock.log_hour
      dock.log_hour

      # Any hours rented past the max rental time don't factor into revenue
      dock.log_hour
      dock.log_hour

      dock.return(sup_1)
      dock.return(sup_2)

      # Total revenue
      expect(dock.revenue).to eq(195)
    end
  end

  describe '#max_rental_time?(boat)' do
    it 'verifies max rental time hit' do
      dock = Dock.new("The Rowing Dock", 3)
      sup_1 = Boat.new(:standup_paddle_board, 15)
      eugene = Renter.new("Eugene Crabs", "1313131313131313")

      dock.rent(sup_1, eugene)

      sup_1.add_hour
      sup_1.add_hour

      expect(dock.max_rental_time?(sup_1)).to be(false)

      sup_1.add_hour

      expect(dock.max_rental_time?(sup_1)).to be(true)

      # Any hours past the max rental time should not count
      sup_1.add_hour
      sup_1.add_hour
    end
  end
end
